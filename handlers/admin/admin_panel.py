from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from asyncio import sleep

from data import config

from loader import dp, db
from states import Mailing, EditPagePrice, EditPageDelivery, EditPageContact
from keyboards.default import menu, admin_menu, go_to_admin

@dp.message_handler(user_id=config.ADMINS, text="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
@dp.message_handler(user_id=config.ADMINS, commands=['admin'])
async def admin_panel(message: types.Message):
    count_users = await db.count_users()
    await message.answer(f"‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \n\n"
                         f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {count_users} \n"
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –æ—Ö—É–µ–Ω–Ω—ã.", reply_markup=admin_menu)

# –•–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏
@dp.message_handler(user_id=config.ADMINS, text="üíå –ó–∞—è–≤–∫–∏")
async def admin_panel(message: types.Message):
    orders = await db.get_orders()

    all_order = ""
    for order in orders:
        user_id = str(order.user_id)
        referral = order.referral
        contact = order.contact
        date  = str(order.date)
        message_order = (f"*–ó–∞—è–≤–∫–∞* –æ—Ç [{user_id}](tg://user?id={user_id}) \n"
                         f"{contact} \n"
                         f"_–î–∞—Ç–∞: {date}_ \n\n")
        
        all_order += message_order

    await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞—è–≤–æ–∫: \n\n"
                         f"{all_order}", reply_markup=admin_menu)


# –•–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π
@dp.message_handler(user_id=config.ADMINS, text="üì® –†–∞—Å—Å—ã–ª–∫–∞")
async def mailing(message: types.Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=go_to_admin)
    await Mailing.Text.set()


@dp.message_handler(user_id=config.ADMINS, state=Mailing.Text)
async def mailing_start(message:types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞": 
        await admin_panel(message)
        await state.reset_state()
    else:

        await state.update_data(text=text)

        data = await state.get_data()
        text = data.get("text")
        await state.reset_state()
        users = await db.get_all_users()

        for user in users:
            try:
                await dp.bot.send_message(chat_id=user.user_id,
                                   text=text)
                await sleep(0.3)
            except Exception:
                pass
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", reply_markup=admin_menu)


# –•–µ–Ω–¥–ª–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
@dp.message_handler(user_id=config.ADMINS, text="üìÑ —Ä–µ–¥. –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
async def edit_price(message: types.Message):
    page = await db.get_page('pricelist')

    await message.answer(page.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=go_to_admin)
    await EditPagePrice.Text.set()

@dp.message_handler(user_id=config.ADMINS, state=EditPagePrice.Text)
async def edit_price_confirm(message:types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞": 
        await admin_panel(message)
        await state.reset_state()
    else:

        await state.update_data(text=text)
        data = await state.get_data()
        text = data.get("text")
        await state.reset_state()

        try:
            edit_page = await db.update_page('pricelist', text)
            await message.answer("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=admin_menu)
        except Exception:
            await message.answer("–í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=admin_menu)


@dp.message_handler(user_id=config.ADMINS, text="üöõ —Ä–µ–¥. –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞")
async def edit_delivery(message: types.Message):
    page = await db.get_page('delivery')

    await message.answer(page.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=go_to_admin)
    await EditPageDelivery.Text.set()

@dp.message_handler(user_id=config.ADMINS, state=EditPageDelivery.Text)
async def edit_delivery_confirm(message:types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞": 
        await admin_panel(message)
        await state.reset_state()
    else:

        await state.update_data(text=text)
        data = await state.get_data()
        text = data.get("text")
        await state.reset_state()

        try:
            edit_page = await db.update_page('delivery', text)
            await message.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=admin_menu)
        except Exception:
            await message.answer("–í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=admin_menu)


@dp.message_handler(user_id=config.ADMINS, text="üìû —Ä–µ–¥. –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def edit_contact(message: types.Message):
    page = await db.get_page('contact')

    await message.answer(page.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=go_to_admin)
    await EditPageContact.Text.set()

@dp.message_handler(user_id=config.ADMINS, state=EditPageContact.Text)
async def edit_contact_confirm(message:types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞": 
        await admin_panel(message)
        await state.reset_state()
    else:

        await state.update_data(text=text)
        data = await state.get_data()
        text = data.get("text")
        await state.reset_state()

        try:
            edit_page = await db.update_page('contact', text)
            await message.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=admin_menu)
        except Exception:
            await message.answer("–í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=admin_menu)



       